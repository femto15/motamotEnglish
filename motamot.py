import streamlit as st
import gdown
import os
import time
import random
from gensim.models import KeyedVectors

# File settings
MODEL_PATH = "frmodel.bin"
GOOGLE_DRIVE_ID = "1LREFqIB3mVKOdozoJDhnHxVirIi4EhTl"

# ‚ú© Reactions and mascotte images
reactions = {
    "loading": [
        "Hmm... Je r√©fl√©chis...",
        "Patience...",
        "Mes circuits chauffent un peu, attendez"
    ],
    "win": [
        "H√© ouais !",
        "C'est gagn√© !",
        "Carton plein !"
    ],
    "fail": [
        "Ouch...",
        "Nope, √ßa colle pas trop",
        "Pas gagn√© cette fois !"
    ],
    "close": [
        "A ce niveau l√† c'est pas de la proximit√©, c'est de la fusion",
        "Ces deux mots sont plus proches que deux chaussettes dans un tiroir",
        "Ben oui que c'est proche...Bravo Sherlock",
        "L'eau √ßa mouille et le feu √ßa br√ªle..."
    ],
    "far": [
        "Le jour et la nuit...et vous √™tes pas des lumi√®res apparement...",
        "Je suis choqu√© que vous ayez tent√© le coup...et je suis un algo !",
        "C‚Äôest un grand √©cart lexical"
    ]
}

images = {
    "loading": "mascotte_loading.png",
    "win": "mascotte_win.png",
    "fail": "mascotte_fail.png",
    "close": "mascotte_close.png",
    "far": "mascotte_far.png"
}

# Display mascotte image and message
def display_mascotte(state):
    col1, col2 = st.columns([1, 3])
    with col1:
        st.image(images[state],width=200)
    with col2:
        phrase = random.choice(reactions[state])
        st.markdown(
            f"<div style='color: yellow; font-weight: bold; font-size: 18px;'>{phrase}</div>",
            unsafe_allow_html=True
        )

# üîπ Download model
def download_model():
    msg = st.empty()
    if not os.path.exists(MODEL_PATH) or os.path.getsize(MODEL_PATH) < 5000000:
        msg.info("Chargement du mod√®le...")
        url = f"https://drive.google.com/uc?id={GOOGLE_DRIVE_ID}"
        gdown.download(url, MODEL_PATH, quiet=False)
        msg.success("Mod√®le charg√©!")
        time.sleep(1.5)
    msg.empty()

# üîπ Load model
@st.cache_resource
def load_model():
    download_model()
    try:
        return KeyedVectors.load_word2vec_format(MODEL_PATH, binary=True)
    except Exception as e:
        st.error(f"Erreur lors du chargement : {e}")
        st.stop()

# üîπ UI
st.set_page_config(page_title="Akinamot", layout="centered")


# col1, col2 = st.columns([1, 3])
# with col1:
#     st.image("mascotte.png",)
# with col2:
#     st.markdown(
#         """
#         <div style='color: white; font-weight: bold; font-size: 20px;'>
#             Bienvenue sur Akinamot !<br>Je suis l√† pour vous aider √† comparer deux mots.
#         </div>
#         """,
#         unsafe_allow_html=True
#     )

word1 = st.text_input("Premier mot:").strip().lower()
word2 = st.text_input("Deuxi√®me mot:").strip().lower()
THRESHOLD = 0.215

if st.button("Sont-ils proches ?"):
    if word1 and word2:
        model = load_model()

        try:
            similarity = model.similarity(word1, word2)

            mascotte_placeholder = st.empty()
            with mascotte_placeholder.container():
                display_mascotte("loading")

            flicker_placeholder = st.empty()

            st.markdown(
                """
                <style>
                @keyframes fadeInOut {
                    0% { opacity: 1; }
                    50% { opacity: 0.2; }
                    100% { opacity: 1; }
                }
                .flicker {
                    animation: fadeInOut 0.4s infinite alternate;
                }
                </style>
                """,
                unsafe_allow_html=True
            )

            start_time = time.time()
            flicker_choices = [("OUI", "#34D399"), ("NON", "#EF4444")]
            while time.time() - start_time < 5:
                text, color = random.choice(flicker_choices)
                flicker_placeholder.markdown(
                    f"""
                    <div class='flicker' style='background-color: {color}; padding: 25px; text-align: center; font-size: 36px; color: white; font-weight: bold; margin-top: 10px;'>
                        {text}
                    </div>
                    """,
                    unsafe_allow_html=True
                )
                time.sleep(0.4)

            flicker_placeholder.empty()
            mascotte_placeholder.empty()

            # Choisir la r√©action
            if similarity > 0.4:
                state = "close"
            elif similarity > THRESHOLD:
                state = "win"
            elif similarity < 0.09:
                state = "far"
            else:
                state = "fail"

            with mascotte_placeholder.container():
                display_mascotte(state)

            final_color = "#34D399" if similarity > THRESHOLD else "#EF4444"
            result = "OUI" if similarity > THRESHOLD else "NON"

            st.markdown(
                f"""
                <div style='background-color: {final_color}; padding: 25px; text-align: center; font-size: 42px; color: white; font-weight: bold; margin-top: 10px;'>
                    {result}
                </div>
                """,
                unsafe_allow_html=True
            )

            st.info(f"**Score de Similarit√©:** `{similarity:.3f}` (Seuil: {THRESHOLD})")

        except KeyError:
            st.error("Un ou des mots n'ont pas √©t√© trouv√©s")
    else:
        st.warning("Champs vides")